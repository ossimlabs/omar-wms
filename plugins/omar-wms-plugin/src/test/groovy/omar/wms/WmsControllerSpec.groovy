package omar.wms


import spock.lang.*

class WmsControllerSpec extends Specification
{

    /*
        Here we want to test WebMappingService.getMap() method, mocking the calls to external services
     */
    void "test getMap with getPsm=true"()
    {
        def wms = Spy(WebMappingService)

        final GetMapRequest exampleGetMapRequest = new GetMapRequest()

        exampleGetMapRequest.with {
            width = 256
            height = 256
            bbox = "1.1,1.1,1.1,1.1"
            service = "WMS"
            version = "1.1.1"
            request = "getPsm"
            srs = "EPSG:4326"
            crs = null
            bbox = '147.3211669921875,-42.879638671875,147.32391357421875,-42.87689208984375'
            format = 'image/png'
            layers = 'omar:raster_entry'
            styles = "{\"bands\":\"default\",\"histCenterTile\":false,\"histOp\":\"auto-minmax\",\"resamplerFilter\":\"bilinear\",\"nullPixelFlip\":false}"
            transparent = true
            filter = 'INTERSECTS(ground_geom,POLYGON((146.9285294926882 -42.96513088145454, 146.9285294926882 -42.74156864994309, 147.4379233272598 -42.74156864994309, 147.4379233272598 -42.96513088145454, 146.9285294926882 -42.96513088145454)))'
            exceptions = null
            bgcolor = null
            username = (null)
        }

        Map<String, Object> parseLayersResult = [
                'images[0].file': '/data/s3/2009/02/05/00/ntf/05FEB09OV05010005V090205P0001912264B220000100282M_001508507.ntf',
                'images[0].entry': 0,
                'images[1].file': '/data/s3/2009/02/05/00/ntf/05FEB09OV05010005V090205M0001912264B220000100072M_001508507.ntf',
                'images[1].entry': 0,
                'rawCoords': "[[[[147.1655, -42.7832], [147.173, -42.7832], [147.1809, -42.7836], [147.1889, -42.784], [147.1963, -42.7839], [147.2034, -42.7835], [147.2104, -42.7831], [147.2175, -42.7827], [147.2249, -42.7825], [147.2322, -42.7823], [147.2396, -42.7822], [147.247, -42.7822], [147.2545, -42.7821], [147.262, -42.7821], [147.2695, -42.782], [147.277, -42.782], [147.2845, -42.782], [147.292, -42.782], [147.2998, -42.7822], [147.3079, -42.7828], [147.3152, -42.7826], [147.3225, -42.7823], [147.33, -42.7824], [147.3377, -42.7825], [147.3453, -42.7826], [147.3528, -42.7825], [147.3526, -42.7886], [147.3524, -42.7947], [147.3523, -42.8008], [147.3523, -42.8071], [147.3524, -42.8135], [147.3525, -42.8198], [147.3525, -42.8261], [147.3524, -42.8322], [147.3524, -42.8385], [147.3524, -42.8448], [147.3524, -42.851], [147.3525, -42.8573], [147.3525, -42.8636], [147.3526, -42.8699], [147.3525, -42.8761], [147.3526, -42.8824], [147.3526, -42.8887], [147.3526, -42.8949], [147.3527, -42.9012], [147.3527, -42.9075], [147.3529, -42.914], [147.353, -42.9202], [147.3528, -42.9264], [147.3529, -42.9326], [147.3529, -42.9389], [147.3455, -42.9391], [147.3383, -42.9393], [147.3311, -42.9396], [147.3234, -42.9395], [147.3156, -42.9393], [147.3083, -42.9395], [147.3009, -42.9395], [147.2933, -42.9395], [147.2859, -42.9396], [147.2784, -42.9397], [147.2708, -42.9396], [147.2633, -42.9397], [147.256, -42.9399], [147.2487, -42.9401], [147.2413, -42.9402], [147.2339, -42.9403], [147.2265, -42.9405], [147.2188, -42.9403], [147.2112, -42.9402], [147.204, -42.9405], [147.1968, -42.9408], [147.1892, -42.9408], [147.1817, -42.9408], [147.1741, -42.9408], [147.1663, -42.9405], [147.1663, -42.9343], [147.1666, -42.9282], [147.1668, -42.9222], [147.167, -42.916], [147.1664, -42.9093], [147.1663, -42.903], [147.1663, -42.8967], [147.1664, -42.8905], [147.1671, -42.8848], [147.1672, -42.8787], [147.167, -42.8722], [147.1666, -42.8657], [147.1663, -42.8591], [147.1662, -42.8527], [147.1661, -42.8464], [147.1661, -42.8401], [147.166, -42.8338], [147.166, -42.8275], [147.166, -42.8212], [147.1656, -42.8146], [147.165, -42.8078], [147.1649, -42.8015], [147.165, -42.7953], [147.1652, -42.7892], [147.1655, -42.7832]]]]"
        ]

        Map<String, Object> parseBboxResult = [
                'minX': 147.3321533203125,
                'minY': -42.88238525390625,
                'maxX': 147.33489990234375,
                'maxY': -42.879638671875,
                'proj': ['id': 'EPSG:4326', 'units': '\u00b0']
        ]

        Map<String, Object> callOmsServiceInput = [
                'images[0].file': '/data/s3/2009/02/05/00/ntf/05FEB09OV05010005V090205P0001912264B220000100282M_001508507.ntf',
                'images[0].entry': 0,
                'images[1].file': '/data/s3/2009/02/05/00/ntf/05FEB09OV05010005V090205M0001912264B220000100072M_001508507.ntf',
                'images[1].entry': 0,
                'cutWidth': 256,
                'cutHeight': 256,
                'outputFormat': 'image/png',
                'transparent': true,
                'operation': 'psm',
                'outputRadiometry': 'ossim_uint8',
                'bands': 'default',
                'histOp': 'auto-minmax',
                'resamplerFilter': 'bilinear',
                'nullPixelFlip': false,
                'cutWmsBbox': "147.3321533203125,-42.88238525390625,147.33489990234375,-42.879638671875",
                'srs': 'EPSG:4326'
        ]

        Map<String, Object> callOmsServiceResult = [
                'statuss': 200,
                'buffer': new byte[0],
                'contentType': 'image/png'
        ]

        wms.omsChipperUrl = 'https://localhost'

        when:
            wms.getMap(exampleGetMapRequest, true)

        then:
            1 * wms.parseLayers(exampleGetMapRequest) >> parseLayersResult
            1 * wms.parseBbox(exampleGetMapRequest) >> parseBboxResult
            1 * wms.callOmsService(callOmsServiceInput) >> callOmsServiceResult
    }

    void "test optimalFormat function for png return"()
    {
        def wms = Spy(WebMappingService)

        Map<String, Object> mockBbox = [
                'minX': -3.6177,
                'minY': 40.4172,
                'maxX': -3.5438,
                'maxY': 40.4663,
                'proj': ['id': 'EPSG:4326', 'units': '\u00b0']
        ]

        Map<String, Object> mockOmsParams = [
                'images[0].file': '/data//Madrid/057310297010_01_P002_PAN/16AUG23141705-P1BS-057310297010_01_P002.TIF',
                'images[0].entry': 0,
                'rawCoords': [[[[-3.6024, 40.5493], [-3.5932, 40.5493], [-3.584, 40.5492], [-3.5748, 40.5491], [-3.5656, 40.549], [-3.5564, 40.549], [-3.5473, 40.5489], [-3.5383, 40.5489], [-3.5292, 40.5488], [-3.5201, 40.5487], [-3.5111, 40.5487], [-3.5019, 40.5486], [-3.4927, 40.5486], [-3.4834, 40.5485], [-3.4741, 40.5484], [-3.4647, 40.5483], [-3.4555, 40.5483], [-3.4462, 40.5482], [-3.4369, 40.5481], [-3.4275, 40.548], [-3.4182, 40.5479], [-3.4091, 40.5479], [-3.3998, 40.5478], [-3.3904, 40.5477], [-3.3809, 40.5476], [-3.3716, 40.5475], [-3.3716, 40.5418], [-3.3715, 40.5361], [-3.3715, 40.5304], [-3.3715, 40.5247], [-3.3714, 40.519], [-3.3714, 40.5133], [-3.3714, 40.5076], [-3.3714, 40.5019], [-3.3714, 40.4962], [-3.3713, 40.4904], [-3.3713, 40.4847], [-3.3713, 40.479], [-3.3713, 40.4733], [-3.3713, 40.4676], [-3.3713, 40.4619], [-3.3715, 40.4562], [-3.3717, 40.4505], [-3.3716, 40.4448], [-3.3716, 40.439], [-3.3715, 40.4333], [-3.3715, 40.4276], [-3.3714, 40.4219], [-3.3714, 40.4162], [-3.3714, 40.4104], [-3.3715, 40.4047], [-3.3808, 40.4048], [-3.39, 40.4049], [-3.3994, 40.4051], [-3.4087, 40.4052], [-3.4179, 40.4053], [-3.4273, 40.4054], [-3.4367, 40.4055], [-3.4461, 40.4056], [-3.4554, 40.4057], [-3.4645, 40.4058], [-3.4737, 40.4059], [-3.4829, 40.406], [-3.492, 40.4061], [-3.5012, 40.4062], [-3.5104, 40.4063], [-3.5198, 40.4064], [-3.5292, 40.4065], [-3.5384, 40.4066], [-3.5476, 40.4067], [-3.5568, 40.4068], [-3.5659, 40.4069], [-3.5751, 40.407], [-3.5842, 40.4071], [-3.5934, 40.4072], [-3.6026, 40.4073], [-3.6026, 40.413], [-3.6026, 40.4187], [-3.6027, 40.4244], [-3.6026, 40.4301], [-3.6026, 40.4357], [-3.6025, 40.4414], [-3.6025, 40.4471], [-3.6024, 40.4528], [-3.6025, 40.4585], [-3.6025, 40.4642], [-3.6025, 40.4698], [-3.6025, 40.4755], [-3.6025, 40.4812], [-3.6025, 40.4869], [-3.6024, 40.4926], [-3.6024, 40.4982], [-3.6024, 40.5039], [-3.6024, 40.5096], [-3.6024, 40.5153], [-3.6024, 40.5209], [-3.6024, 40.5266], [-3.6024, 40.5323], [-3.6023, 40.538], [-3.6023, 40.5436], [-3.6024, 40.5493]]]],
                'cutWidth': 512,
                'cutHeight': 512,
                'outputFormat': 'image/png',
                'transparent': false,
                'operation': 'ortho',
                'outputRadiometry': 'ossim_uint8',
                'cutWmsBbox': "-3.6177,40.4172,-3.5438,40.4663",
                'srs': 'EPSG:4326'
        ]

        when:
            String correctFormat = wms.optimalFormat(mockOmsParams, mockBbox, '1.1.1')

        then:
            correctFormat == "image/png"
    }

    void "test optimalFormat function for jpeg return"()
    {
        def wms = Spy(WebMappingService)

        Map<String, Object> mockBbox = [
                'minX': -3.5767,
                'minY': 40.4259,
                'maxX': -3.4071,
                'maxY': 40.5200,
                'proj': ['id': 'EPSG:4326', 'units': '\u00b0']
        ]

        Map<String, Object> mockOmsParams = [
                'images[0].file': '/data//Madrid/057310297010_01_P002_PAN/16AUG23141705-P1BS-057310297010_01_P002.TIF',
                'images[0].entry': 0,
                'rawCoords': [[[[-3.6024, 40.5493], [-3.5932, 40.5493], [-3.584, 40.5492], [-3.5748, 40.5491], [-3.5656, 40.549], [-3.5564, 40.549], [-3.5473, 40.5489], [-3.5383, 40.5489], [-3.5292, 40.5488], [-3.5201, 40.5487], [-3.5111, 40.5487], [-3.5019, 40.5486], [-3.4927, 40.5486], [-3.4834, 40.5485], [-3.4741, 40.5484], [-3.4647, 40.5483], [-3.4555, 40.5483], [-3.4462, 40.5482], [-3.4369, 40.5481], [-3.4275, 40.548], [-3.4182, 40.5479], [-3.4091, 40.5479], [-3.3998, 40.5478], [-3.3904, 40.5477], [-3.3809, 40.5476], [-3.3716, 40.5475], [-3.3716, 40.5418], [-3.3715, 40.5361], [-3.3715, 40.5304], [-3.3715, 40.5247], [-3.3714, 40.519], [-3.3714, 40.5133], [-3.3714, 40.5076], [-3.3714, 40.5019], [-3.3714, 40.4962], [-3.3713, 40.4904], [-3.3713, 40.4847], [-3.3713, 40.479], [-3.3713, 40.4733], [-3.3713, 40.4676], [-3.3713, 40.4619], [-3.3715, 40.4562], [-3.3717, 40.4505], [-3.3716, 40.4448], [-3.3716, 40.439], [-3.3715, 40.4333], [-3.3715, 40.4276], [-3.3714, 40.4219], [-3.3714, 40.4162], [-3.3714, 40.4104], [-3.3715, 40.4047], [-3.3808, 40.4048], [-3.39, 40.4049], [-3.3994, 40.4051], [-3.4087, 40.4052], [-3.4179, 40.4053], [-3.4273, 40.4054], [-3.4367, 40.4055], [-3.4461, 40.4056], [-3.4554, 40.4057], [-3.4645, 40.4058], [-3.4737, 40.4059], [-3.4829, 40.406], [-3.492, 40.4061], [-3.5012, 40.4062], [-3.5104, 40.4063], [-3.5198, 40.4064], [-3.5292, 40.4065], [-3.5384, 40.4066], [-3.5476, 40.4067], [-3.5568, 40.4068], [-3.5659, 40.4069], [-3.5751, 40.407], [-3.5842, 40.4071], [-3.5934, 40.4072], [-3.6026, 40.4073], [-3.6026, 40.413], [-3.6026, 40.4187], [-3.6027, 40.4244], [-3.6026, 40.4301], [-3.6026, 40.4357], [-3.6025, 40.4414], [-3.6025, 40.4471], [-3.6024, 40.4528], [-3.6025, 40.4585], [-3.6025, 40.4642], [-3.6025, 40.4698], [-3.6025, 40.4755], [-3.6025, 40.4812], [-3.6025, 40.4869], [-3.6024, 40.4926], [-3.6024, 40.4982], [-3.6024, 40.5039], [-3.6024, 40.5096], [-3.6024, 40.5153], [-3.6024, 40.5209], [-3.6024, 40.5266], [-3.6024, 40.5323], [-3.6023, 40.538], [-3.6023, 40.5436], [-3.6024, 40.5493]]]],
                'cutWidth': 512,
                'cutHeight': 512,
                'outputFormat': 'image/png',
                'transparent': false,
                'operation': 'ortho',
                'outputRadiometry': 'ossim_uint8',
                'cutWmsBbox': "-3.5767,40.4259,-3.4071,40.5200",
                'srs': 'EPSG:4326'
        ]

        when:
            String correctFormat = wms.optimalFormat(mockOmsParams, mockBbox, '1.1.1')

        then:
            correctFormat == "image/jpeg"
    }
}
