buildscript {
  repositories {
    mavenLocal()
    maven { url ossimMavenProxy }
  }
  dependencies {
    classpath "org.grails:grails-gradle-plugin:$grailsVersion"
    classpath "com.bertramlabs.plugins:asset-pipeline-gradle:2.14.10"
    classpath "org.grails.plugins:hibernate5:${gormVersion-".RELEASE"}"
    classpath 'com.bmuschko:gradle-docker-plugin:3.0.12'
    classpath 'io.ossim:gradleDefaults:1.6-SNAPSHOT'
  }
}

plugins {
  id "com.github.ben-manes.versions" version "0.17.0"
  id "org.sonarqube" version "2.6.2"
}

apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: "org.grails.grails-web"
apply plugin: "org.grails.grails-gsp"
apply plugin: "asset-pipeline"

apply plugin: "java"
apply plugin: "maven-publish"

repositories {
  mavenLocal()
  maven { url ossimMavenProxy }
}

io.ossim.gradleDefaults.Variables.setAdditionalVariables(project)
io.ossim.gradleDefaults.Variables.setVersionVariables(project)
dockerBuildDir="${rootProject.projectDir}/docker"
version "${buildVersion}-${buildVersionTag}"
jarDestination = "${projectDir}/build/libs/${project.name}-${version}.jar"
io.ossim.gradleDefaults.Publications.addPublication(project, groupName, name, "${buildVersion}-${buildVersionTag}")
io.ossim.gradleDefaults.Publications.addRepository(project, mavenPublishUrl, mavenRepoUsername, mavenRepoPassword)
io.ossim.gradleDefaults.Docker.addDockerTasks(project, dockerRegistryUrl, dockerRegistryUsername, dockerRegistryPassword, name, dockerImageTag, dockerBuildDir, jarDestination, ["BASE_IMAGE": dockerBaseImage])
io.ossim.gradleDefaults.Openshift.addOpenshiftTasks(project, openshiftUrl, openshiftUsername, openshiftPassword, openshiftProjectName, openshiftServiceName,  dockerRegistryUrl, name, dockerImageTag)

assets {
  minifyJs = true
  minifyCss = true
  includes = ["fonts/*"]
  excludes = ["**/*-debug.js", "**/*-deps.js", "**/*.gz", "**/*.txt", "**/*.less", "**/*.html", "**/i18n/**", "**/",
              ".grunt/**", "**/locale/**", "webjars/jquery/2.1.4/src/intro.js", "webjars/jquery/2.1.4/src/outro.js"]
}

dependencyManagement {
  imports {
    mavenBom "org.springframework.cloud:spring-cloud-starter-parent:${springCloudDependencyV}"
  }
  applyMavenExclusions false
}

grails {
  plugins {
    compile project(':omar-wms-plugin')
  }
}

dependencies {

  compile "de.codecentric:spring-boot-admin-starter-client:${springBootAdminStarterClientV}"

  compile "org.grails:grails-core"
  compile "org.grails:grails-web-boot"
  compile "org.grails:grails-logging"
  compile "org.grails:grails-plugin-rest"
  compile "org.grails:grails-plugin-databinding"
  compile "org.grails:grails-plugin-i18n"
  compile "org.grails:grails-plugin-services"
  compile "org.grails:grails-plugin-url-mappings"
  compile "org.grails:grails-plugin-interceptors"
  compile "org.grails.plugins:cache"
  compile "org.grails.plugins:async"
  compile "org.grails.plugins:scaffolding"
  compile "org.grails.plugins:events"
  compile "org.grails.plugins:hibernate5"
  compile "org.hibernate:hibernate-core:5.1.5.Final"
  compile "org.grails.plugins:gsp"

  compile "org.springframework.boot:spring-boot-starter-logging"
  compile "org.springframework.boot:spring-boot-autoconfigure"
  compile "org.springframework.boot:spring-boot-starter-actuator"
  compile "org.springframework.boot:spring-boot-starter-tomcat"
  compile "org.springframework.cloud:spring-cloud-starter-config"
  compile "org.springframework.cloud:spring-cloud-starter-eureka"

  console "org.grails:grails-console"
  profile "org.grails.profiles:web"
  runtime "org.glassfish.web:el-impl:${elImplV}"
  runtime "com.h2database:h2"
  runtime "org.apache.tomcat:tomcat-jdbc"
  runtime "com.bertramlabs.plugins:asset-pipeline-grails:${assetPipelineGrailsV}"
  testCompile "org.grails:grails-gorm-testing-support"
  testCompile "org.grails.plugins:geb"
  testCompile "org.grails:grails-web-testing-support"
  testRuntime "org.seleniumhq.selenium:selenium-htmlunit-driver:${seleniumHtmlUnitDriverV}"
  testRuntime "net.sourceforge.htmlunit:htmlunit:${htmlUnitV}"
}

bootRun {
  jvmArgs = [
  ]
}
